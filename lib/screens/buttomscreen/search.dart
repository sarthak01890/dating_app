import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'dart:developer';

const Color primaryPurple = Color(0xFF8A2BE2); // DiscoverPage ‡§ï‡§æ ‡§ï‡§≤‡§∞

class SearchUsersPage extends StatefulWidget {
  const SearchUsersPage({super.key});

  @override
  State<SearchUsersPage> createState() => _SearchUsersPageState();
}

class _SearchUsersPageState extends State<SearchUsersPage> {
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> _searchResults = [];
  bool _isSearching = false;
  String? _errorMessage;
  final supabase = Supabase.instance.client;

  @override
  void initState() {
    super.initState();
    // ‡§™‡•á‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á, ‡§Ø‡•Ç‡•õ‡§∞ ‡§ï‡•á ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡•õ‡§æ‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
    _searchController.addListener(_onSearchChanged);
  }

  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    super.dispose();
  }

  // --- Debounce Logic (‡§¨‡•á‡§π‡§§‡§∞ ‡§™‡§∞‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§Ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è) ---
  // ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™ Debouncing Logic ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§™‡§∞ ‡§∏‡§∞‡§≤‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≠‡•Ä ‡§π‡§∞ ‡§ö‡•á‡§Ç‡§ú ‡§™‡§∞ ‡§∏‡§∞‡•ç‡§ö ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
  void _onSearchChanged() {
    final query = _searchController.text.trim();
    if (query.length >= 2 || query.isEmpty) { // 2 ‡§Ö‡§ï‡•ç‡§∑‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡§∞‡•ç‡§ö ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
      _searchUsers(query);
    }
  }

  // --- Supabase ‡§∏‡•á ‡§Ø‡•Ç‡•õ‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡§∞‡•ç‡§ö ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
  Future<void> _searchUsers(String query) async {
    if (!mounted || query.isEmpty) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      return;
    }

    setState(() {
      _isSearching = true;
      _errorMessage = null;
    });

    try {
      // Current Date ‡§∏‡•á 7 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ (‡§Ø‡§æ 'New User' ‡§ï‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ)
      final sevenDaysAgo = DateTime.now().subtract(const Duration(days: 7)).toIso8601String();

      var queryBuilder = supabase
          .from('search_profiles') // ‚úÖ ‡§π‡§Æ‡§®‡•á ‡§™‡§ø‡§õ‡§≤‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§ü‡•á‡§¨‡§≤ ‡§®‡§æ‡§Æ ‡§§‡§Ø ‡§ï‡§ø‡§Ø‡§æ ‡§•‡§æ
          .select('id, username, image_url, bio, created_at')
          .neq('id', supabase.auth.currentUser!.id); // ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§¨‡§æ‡§π‡§∞ ‡§∞‡§ñ‡•á‡§Ç

      // üí° ‡§ï‡•á‡§µ‡§≤ 'New Users' ‡§Æ‡•á‡§Ç ‡§∏‡§∞‡•ç‡§ö ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞
      // ‡§π‡§Æ ‡§Æ‡§æ‡§®‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø 'created_at' ‡§ï‡•â‡§≤‡§Æ 'auth.users' ‡§Ø‡§æ 'search_profiles' ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à
      // ‡§î‡§∞ ‡§Ø‡§π ‡§™‡§ø‡§õ‡§≤‡•á 7 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
      queryBuilder = queryBuilder.gte('created_at', sevenDaysAgo);

      // üí° Username ‡§∏‡•á ‡§∏‡§∞‡•ç‡§ö
      queryBuilder = queryBuilder.ilike('username', '%$query%');

      final List<Map<String, dynamic>> response = await queryBuilder;

      if (mounted) {
        setState(() {
          _searchResults = response;
          _isSearching = false;
        });
      }
    } on PostgrestException catch (e) {
      log('Supabase Search Error: ${e.message}');
      if (mounted) {
        setState(() {
          _errorMessage = "Error: ${e.message}";
          _isSearching = false;
        });
      }
    } catch (e) {
      log('General Search Error: $e');
      if (mounted) {
        setState(() {
          _errorMessage = "An unknown error occurred.";
          _isSearching = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        // üõ†Ô∏è Search Bar ‡§∏‡•Ä‡§ß‡•á AppBar ‡§Æ‡•á‡§Ç
        title: TextField(
          controller: _searchController,
          autofocus: true,
          decoration: InputDecoration(
            hintText: "Search New Users by name...",
            hintStyle: TextStyle(color: Colors.grey.shade400),
            border: InputBorder.none,
            suffixIcon: _searchController.text.isNotEmpty
                ? IconButton(
              icon: const Icon(Icons.clear, color: primaryPurple),
              onPressed: () => _searchController.clear(),
            )
                : null,
          ),
          onChanged: (value) => setState(() {}), // UI ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è
        ),
        iconTheme: const IconThemeData(color: primaryPurple),
        backgroundColor: Colors.white,
        elevation: 1,
      ),
      body: _isSearching
          ? const Center(child: CircularProgressIndicator(color: primaryPurple))
          : _errorMessage != null
          ? Center(child: Text(_errorMessage!, style: const TextStyle(color: Colors.red)))
          : _searchResults.isEmpty && _searchController.text.isNotEmpty
          ? Center(
        child: Text(
          "No new user found matching '${_searchController.text}'.",
          style: TextStyle(color: Colors.grey.shade600),
        ),
      )
          : ListView.builder(
        itemCount: _searchResults.length,
        itemBuilder: (context, index) {
          final userProfile = _searchResults[index];
          final imageUrl = userProfile['image_url'];
          final username = userProfile['username'] ?? 'User';

          return ListTile(
            leading: CircleAvatar(
              radius: 24,
              backgroundColor: primaryPurple.withOpacity(0.1),
              backgroundImage: imageUrl != null && imageUrl.isNotEmpty
                  ? NetworkImage(imageUrl)
                  : null,
              child: imageUrl == null || imageUrl.isEmpty
                  ? const Icon(Icons.person, color: primaryPurple)
                  : null,
            ),
            title: Text(username, style: const TextStyle(fontWeight: FontWeight.bold)),
            subtitle: Text(
                userProfile['bio'] ?? 'New user in the last 7 days',
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
                style: TextStyle(color: Colors.grey.shade600)),
            trailing: const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey),
            onTap: () {
              // TODO: ‡§á‡§∏ ‡§Ø‡•Ç‡•õ‡§∞ ‡§ï‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§™‡§∞ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Viewing profile of $username')),
              );
            },
          );
        },
      ),
    );
  }
}